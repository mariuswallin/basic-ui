@use 'sass:math';
@use 'sass:map';

@mixin styles($modes, $hue, $saturation, $lightness, $name) {
  $base: (
    'light': hsl($hue $saturation $lightness),
    'dark':
      hsl(
        $hue math.round(calc($saturation / 2))
          math.round(calc($lightness / 1.5))
      ),
  );

  @each $mode, $variants in $modes {
    @each $key, $hues in $variants {
      @for $i from 1 through length($hues) {
        --#{$key}-#{$mode}-#{$name}-#{$i}: hsl(#{$hue} #{nth($hues, $i)});
        --#{$key}-#{$mode}-#{$name}-#{calc($i * 100)}: hsl(
          #{$hue} #{$saturation} #{calc($lightness - (7% * $i))}
        );
      }
      @if $key == 'base' {
        $base_hue: map.get($base, #{$mode});
        @if $name {
          --#{$key}-#{$mode}-#{$name}: #{$base_hue};
        } @else {
          --#{$key}-#{$mode}: #{$base_hue};
        }
      }
    }
  }
}

@mixin styleMode($schema, $modes, $colors) {
  @each $mode, $variants in $modes {
    @if $schema == $mode {
      @each $key, $hues in $variants {
        @each $c, $color in $colors {
          @for $i from 1 through length($hues) {
            --#{$key}-#{$c}-#{$i}: var(--#{$key}-#{$mode}-#{$c}-#{$i});
          }
          --#{$key}-#{$c}: var(--#{$key}-#{$mode}-#{$c});
        }
      }
    }
  }
}

$light-text-hues: 100% 10%, 30% 30%;
$light-base-hues: 70% 60%, 70% 50%, 70% 40%, 70% 30%, 70% 20%;
$light-shadow-hues: 10% 20%, 10 15%;
$dark-text-hues: 15% 85%, 5% 65%;
$dark-base-hues: 30% 60%, 30% 50%, 30% 40%, 30% 30%, 30% 20%;
$dark-shadow-hues: 50% 10%, 50% 5%;

$modes: (
  'light': (
    'text': $light-text-hues,
    'base': $light-base-hues,
    'shadow': $light-shadow-hues,
  ),
  'dark': (
    'text': $dark-text-hues,
    'base': $dark-base-hues,
    'shadow': $dark-shadow-hues,
  ),
);

$colors: (
  'primary': (
    'h': 202,
    's': 99%,
    'l': 29%,
  ),
  'secondary': (
    'h': 203,
    's': 61%,
    'l': 84%,
  ),
  'tertiary': (
    'h': 203,
    's': 86%,
    'l': 75%,
  ),
  'inverse': (
    'h': 13,
    's': 61%,
    'l': 57%,
  ),
  'warning': (
    'h': 52,
    's': 94%,
    'l': 52%,
  ),
  'success': (
    'h': 177,
    's': 37%,
    'l': 42%,
  ),
  'error': (
    'h': 0,
    's': 100%,
    'l': 60%,
  ),
  'slate': (
    'h': 220,
    's': 1%,
    'l': 70%,
  ),
  'dark': (
    'h': 220,
    's': 1%,
    'l': 40%,
  ),
  'white': (
    'h': 220,
    's': 1%,
    'l': 100%,
  ),
);

* {
  @each $key, $color in $colors {
    @include styles(
      $modes,
      map.get($color, 'h'),
      map.get($color, 's'),
      map.get($color, 'l'),
      $key
    );
  }

  /* extra */
  --shadow-strength-light: 0.02;
  --shadow-strength-dark: 0.8;
  --shadow-strength-dim: 0.2;
}

:root {
  color-scheme: light;

  @include styleMode('light', $modes, $colors);
  --shadow-strength: var(--shadow-strength-light);
}

[color-scheme='light'] {
  color-scheme: light;

  @include styleMode('light', $modes, $colors);
  --shadow-strength: var(--shadow-strength-light);
}

@media (prefers-color-scheme: dark) {
  :root {
    color-scheme: dark;

    @include styleMode('dark', $modes, $colors);
    --shadow-strength: var(--shadow-strength-dark);
  }
}

[color-scheme='dark'],
html.dark {
  color-scheme: dark;

  @include styleMode('dark', $modes, $colors);
  --shadow-strength: var(--shadow-strength-dark);
}
